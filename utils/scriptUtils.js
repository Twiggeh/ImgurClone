import { spawn } from 'child_process';
import { createInterface } from 'readline';
export const createLock = () => {
    const lock = {};
    lock.p = new Promise((res, rej) => {
        lock.res = res;
        lock.rej = rej;
    });
    return lock;
};
export const useReadLine = (stdin, stdout) => {
    const rl = createInterface({ input: stdin, output: stdout });
    const asyncReadLine = async (question) => {
        const questionLock = createLock();
        rl.question(question, questionLock.res);
        return questionLock.p;
    };
    return asyncReadLine;
};
export const asyncProcess = (command, opts, outputNeedsToEqual) => {
    const procLock = createLock();
    const subProc = spawn(command, opts);
    if (outputNeedsToEqual) {
        subProc.stdout.on('data', data => {
            const strData = data.toString();
            console.log(strData);
            if (strData.includes(outputNeedsToEqual))
                procLock.res();
        });
    }
    else {
        subProc.on('exit', procLock.res);
        subProc.stdout.on('data', data => console.log(data.toString()));
    }
    subProc.stderr.on('data', (e) => {
        const nonErrors = [
            'Debugger attached.\n',
            'Waiting for the debugger to disconnect...\n',
            'DeprecationWarning:',
            'Cloning',
            'warning',
        ];
        const strErr = e.toString();
        console.error(strErr);
        for (const nonError of nonErrors) {
            if (strErr.includes(nonError))
                return;
        }
        procLock.rej(strErr);
    });
    return [procLock.p, subProc];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0VXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzY3JpcHRVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBVTNDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxHQUd4QixFQUFFO0lBQ0gsTUFBTSxJQUFJLEdBQW1DLEVBQUUsQ0FBQztJQUNoRCxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFtQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNuRCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQXFDLENBQUM7UUFDakQsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFvQyxDQUFDO0lBQ2pELENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxJQUE2QixDQUFDO0FBQ3RDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUMxQixLQUVDLEVBQ0QsTUFBeUMsRUFDeEMsRUFBRTtJQUNILE1BQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFFN0QsTUFBTSxhQUFhLEdBQUcsS0FBSyxFQUFFLFFBQWdCLEVBQW1CLEVBQUU7UUFDakUsTUFBTSxZQUFZLEdBQUcsVUFBVSxFQUFrQixDQUFDO1FBQ2xELEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QyxPQUFPLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxhQUFhLENBQUM7QUFDdEIsQ0FBQyxDQUFDO0FBS0YsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQzNCLE9BQWUsRUFDZixJQUE4QixFQUM5QixrQkFBMkIsRUFDMUIsRUFBRTtJQUNILE1BQU0sUUFBUSxHQUFHLFVBQVUsRUFBcUIsQ0FBQztJQUNqRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXJDLElBQUksa0JBQWtCLEVBQUU7UUFDdkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2hDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JCLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztnQkFBRSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDMUQsQ0FBQyxDQUFDLENBQUM7S0FDSDtTQUFNO1FBQ04sT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNoRTtJQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQVMsRUFBRSxFQUFFO1FBQ3ZDLE1BQU0sU0FBUyxHQUFHO1lBQ2pCLHNCQUFzQjtZQUN0Qiw2Q0FBNkM7WUFDN0MscUJBQXFCO1lBQ3JCLFNBQVM7WUFDVCxTQUFTO1NBQ1QsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1QixPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RCLEtBQUssTUFBTSxRQUFRLElBQUksU0FBUyxFQUFFO1lBQ2pDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7Z0JBQUUsT0FBTztTQUN0QztRQUNELFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQVUsQ0FBQztBQUN2QyxDQUFDLENBQUMifQ==